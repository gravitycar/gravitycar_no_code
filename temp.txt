The `RouteRegistry` class is a dynamic route management system for an API framework. Here's a summary of its key functionality:

## Purpose
Automatically discovers, registers, and matches API routes by scanning for API controller classes.

## Core Properties
- `$routes` - Collection of Routes objects
- `$apiClasses` - Discovered API controller instances
- `$registry` - Optimized lookup structure organized by HTTP method and path length
- `$registryFilePath` - Cache file path for persistent storage

## Key Methods

**Discovery & Registration:**
- `collectAPIClasses()` - Recursively scans `src/API/` and `Gravitons/` directories for `*APIController.php` files
- `registerRoutes()` - Calls `registerRoutes()` on each discovered API class to collect route definitions
- `buildRegistry()` - Builds optimized lookup structure organized by method → length → path

**Caching:**
- `storeRegistry()` - Saves registry to PHP file for performance
- `loadRegistry()` - Loads cached registry or rebuilds if missing
- `rebuildRegistry()` - Forces full rebuild of registry

**Route Matching:**
- `searchRegistryForBestMatch()` - Finds best matching route using scoring algorithm
  - Exact path matches get priority
  - Partial matches scored by component position weights
  - Logs conflicts when multiple routes have same score

## Benefits
1. **Auto-discovery** - No manual route registration needed
2. **Performance** - Cached registry for fast lookups
3. **Smart matching** - Handles dynamic route segments
4. **Error handling** - Comprehensive validation and logging
5. **Maintainability** - Self-managing route system

The class essentially provides a convention-over-configuration approach to API routing in the application.

Module Definitions
# {Module Name}
## Overview
### Models
### Menu Links
### Views

Model definitions
# {model name}
## Overview
## Fields
## Features
## Permissions